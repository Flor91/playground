0
00:00:00,000 --> 00:00:01,200


1
00:00:01,200 --> 00:00:03,630
Spark supports joins in two ways.

2
00:00:03,630 --> 00:00:08,150
SparkSQL and Spark DataFrames support inner, outer,

3
00:00:08,150 --> 00:00:12,630
left outer, right outer, and semijoin operations.

4
00:00:12,630 --> 00:00:17,600
For Pair RDDs, pySpark supports inner join, left outer join,

5
00:00:17,600 --> 00:00:21,860
right outer join, and full outer join.

6
00:00:21,860 --> 00:00:27,630
Here's an example of how pair RDDs support joins.

7
00:00:27,630 --> 00:00:32,090
X.join(Y) will return an RDD containing all pairs

8
00:00:32,090 --> 00:00:36,190
of elements with matching keys in X and Y.

9
00:00:36,190 --> 00:00:43,600
Each pair will be of the form k and v1, v2 as a tuple,

10
00:00:43,600 --> 00:00:49,170
where (k, v1) is in X and (k, v2) is in Y.

11
00:00:49,170 --> 00:00:52,180
So here we have an example of two collections,

12
00:00:52,180 --> 00:00:56,550
we have a collection that contains a and y as a pair,

13
00:00:56,550 --> 00:00:58,970
along with b and 4 as a pair.

14
00:00:58,970 --> 00:01:02,580
And a second collection that contains a and 2 as a pair

15
00:01:02,580 --> 00:01:04,720
and a and three as a pair.

16
00:01:04,720 --> 00:01:09,300
When we perform a join, the result

17
00:01:09,300 --> 00:01:16,630
will be a collection consisting of a and the pair 1, 2,

18
00:01:16,630 --> 00:01:21,300
because 1 appears in x and 2 appears in y.

19
00:01:21,300 --> 00:01:28,510
And a and the pair 1 and 3, because a 1 appears

20
00:01:28,510 --> 00:01:33,110
in x and a 3 appears in y.

21
00:01:33,110 --> 00:01:36,450
Notice that b does not appear in the output,

22
00:01:36,450 --> 00:01:41,010
because b only appears an x not in y.

23
00:01:41,010 --> 00:01:43,970
Here we have a left outer join, which

24
00:01:43,970 --> 00:01:49,070
has the property that for each element kv in X,

25
00:01:49,070 --> 00:01:55,170
the resulting RDD will contain either all pairs k

26
00:01:55,170 --> 00:02:05,930
and the pair (v, w) for w in Y or the pair k and (v, none)

27
00:02:05,930 --> 00:02:10,039
if no elements in Y have the key k.

28
00:02:10,039 --> 00:02:15,060
So as the example, we have a and 1

29
00:02:15,060 --> 00:02:18,480
as a pair and b and 4 as a pair.

30
00:02:18,480 --> 00:02:21,580
And we have a relation consisting of a and 2

31
00:02:21,580 --> 00:02:23,010
as a pair.

32
00:02:23,010 --> 00:02:25,100
So when we do the left outer join,

33
00:02:25,100 --> 00:02:29,590
the result will be the pair a the pair 1,

34
00:02:29,590 --> 00:02:35,200
2, because 1 appears in X and 2 appears in Y with a.

35
00:02:35,200 --> 00:02:44,120
And the pair b along with 4 and none, because 4 comes from X.

36
00:02:44,120 --> 00:02:49,440
And b only appears in X and not in Y.

37
00:02:49,440 --> 00:02:55,180
With a right outer join, each element (k, w) in Y

38
00:02:55,180 --> 00:03:01,790
will result in RDD containing all pairs of k

39
00:03:01,790 --> 00:03:08,120
and the pair (v, w) for v and x, or the pair k and (None, w)

40
00:03:08,120 --> 00:03:12,570
if no elements in X have the key k.

41
00:03:12,570 --> 00:03:16,940
So in this case, we start with a and 1 as a pair and b and four

42
00:03:16,940 --> 00:03:20,970
as a pair in X. And a and 2 as a pair in Y.

43
00:03:20,970 --> 00:03:23,770
Now when we perform our left outer join,

44
00:03:23,770 --> 00:03:26,505
we'll end up with the result a and 2,

45
00:03:26,505 --> 00:03:32,860
1, because 2 appears in Y and 1 appears

46
00:03:32,860 --> 00:03:38,930
in X, both with a, and b along with (None, 4),

47
00:03:38,930 --> 00:03:46,000
because b appears in X but not in Y.

48
00:03:46,000 --> 00:03:49,370
The last join is a full outer join,

49
00:03:49,370 --> 00:03:52,200
and for each element (k, v) in X,

50
00:03:52,200 --> 00:03:56,800
the resulting RDD will either continue all pairs of k

51
00:03:56,800 --> 00:04:02,130
and the pair (v, w) for w and Y or k and the pair (v, None)

52
00:04:02,130 --> 00:04:05,180
if no elements in Y have k.

53
00:04:05,180 --> 00:04:13,150
It'll also contain, for all elements (k, v) in Y,

54
00:04:13,150 --> 00:04:17,980
all pairs k and the pair (v, w) for v and X

55
00:04:17,980 --> 00:04:24,332
or k in the pair (None, w) if no elements in X have k.

56
00:04:24,332 --> 00:04:25,540
So it's a little complicated.

57
00:04:25,540 --> 00:04:27,520
Let's actually look at an example.

58
00:04:27,520 --> 00:04:33,660
So here, we have one collection consisting of the pair a and 1

59
00:04:33,660 --> 00:04:36,140
and b and 4 and a second collection consisting

60
00:04:36,140 --> 00:04:38,780
of a and 2 and c and 8.

61
00:04:38,780 --> 00:04:41,420
When we produce the full outer join,

62
00:04:41,420 --> 00:04:46,260
we'll end up with a with the pair 1 and 2,

63
00:04:46,260 --> 00:04:50,930
because a appears both in X and in Y.

64
00:04:50,930 --> 00:04:57,420
We'll end up with the pair b and 4 along with None,

65
00:04:57,420 --> 00:05:01,730
because b only appears in X with the value 4.

66
00:05:01,730 --> 00:05:04,530
And then finally, we'll end up with the pair

67
00:05:04,530 --> 00:05:10,570
c and the pair (None, 8), because c only

68
00:05:10,570 --> 00:05:15,133
appears in Y and not in X, and it appears with the value 8.

69
00:05:15,133 --> 00:05:15,633


